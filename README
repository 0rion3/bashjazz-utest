UTEST
-----
Unit testing for Bash scripts and functions.

With `utest` you can test any program's output, not just Bash scripts.
What makes this library special is that you can also test Bash functions and
nested functions. It is especially appealing when writing Bash scripts and there's just
too much...


DEPENDENCIES
------------
Internal:
  None. No need for any other BashJazz sub-project to be present in your system.
External:
  bash >= v4.2, awk, sed, grep.


BASIC USAGE
-----------
Currently, the following usage pattern is considered to be the most
intuitive one:

  1. Write the script you're about to test, let's call it "my_script.sh"

  2. Create a test script named "my_script.test.sh" and make it executable:

        touch my_script.test.sh
        chmod +x my_script.test.sh

  3. Inside the test-script file, source `utest.sh` from this directory
     and then source `my_script.sh` file that you'll be testing.

     You can put your test files files in a separate directory, but beware of
     relative paths and their correctness. To source 'utest.sh' you'd probably
     want to add `BASHJAZZ_PATH=/path/to/bashjazz` into your shell environment
     file (".bashrc", ".zshrc", etc.).

     Then, your bare minimum `my_script.test.sh` file would look like this:

        #!/usr/bin/env bash
        source $BASHJAZZ_PATH/utest/utest.sh
        source ../path/to/my_script.sh

     Following these lines, you may start adding your unit tests.

  4. To run your tests, go to the directory where you placed your
     test-script file and use this command 

        ./my_script.test.sh


WRITING TESTS
-------------

There's just one function command - `utest` - which you'll use to write all
of your unit tests. However, this function has nested functions, which
serve different kinds of purposes. Here's a full list of possible subcommands
(nested functions) which you can make use of (arguments in [] indicate they're
optional):

  * utest begin NAME [DESCRIPTION]
  * utest cmd [COMMAND] [ARGUMENTS]
  * utest add_cmd [COMMAND] [ARGUMENTS]
  * utest assert VALUE1 == VALUE2
  * utest assert VALUE1 eq VALUE2    (identical previous line)
  * utest assert VALUE1 == ''
  * utest assert VALUE1 is blank     (identical previous line)
  * utest assert VALUE1 not == ''
  * utest assert VALUE1 not eq ''    (identical previous line)
  * utest assert VALUE1 is_not blank (identical previous line)
  * utest end [NAME]

  NOTE:
    The "==" is not an operator here, but another positional argument
    that's internally translated to the "eq", which is a function
    nested inside the `assert()` function.

"DESCRIPTION" is optional, but it's highly recommended you write it. The "NAME"
is required only for the `begin` subcommand, however in not to get lost in
the code it's recommended you use it for the `end` subcommand too.

The `cmd` subcommand runs the specified "COMMAND" with the
"ARGUMENTS" and writes the output into the $UTOUT variable accessible inside the
the test-script file. Therefore, you can then use the `assert` subcommand
to verify the output in this way:

    utest begin MyScript
      utest cmd bash my_script.sh
      utest assert "$UTOUT" == "hello world"
    utest end MyScript

You may want to run multiple commands before running the one which output
you'd like to test, because different commands may set various variables or
modify files or do a number of different kinds of things. In that case, use
the `utest add_cmd` subcommand. When you're done, run `utest cmd` without
arguments and the output of the last command will be written into the $UTOUT
variable.

    utest begin MyScript
      utest add_cmd bash my_script.sh something1
      utest add_cmd bash my_script.sh
      utest cmd
      utest assert "$UTOUT" == "hello world"
    utest end MyScript

You can have multiple levels of nesting for tests:

    utest begin MyScript 'A script that does something I need'
      utest begin function_one 'it had one job...'
        ...
      utest end function_one
    utest end MyScript


The names don't affect anything, so you can pick any name for the begin/end
blocks, so long as it doesn't have spaces in it. However, the suggested
convention is to use function names you're testing.

To print descriptions along with the test names in the test-script output -
prepend the call to your test script file with `PRINT_DESCRIPTIONS=1`,
for example:

    PRINT_DESCRIPTIONS=1 ./my_script.test.sh


TESTING NESTED FUNCTIONS
------------------------
Strictly speaking, there isn't any particular hardcoded demand that would
force you into one way of testing nested functions or the other. But for now,
the simplest way is make your top-level function recognize the `-c` argument
along with the name of the nested function - which would be the value in the
argument after the `-c` flag. So if you decide to go for the nested functions
paradigm, try this inside your script:

    MyScript() {
      if test $1 = '-c'; then
        local CALL_NESTED="$2"
        shift 2
      fi

      function_one() {
        echo "I'm function one"
      }

  --> test -n $CALL_NESTED && $CALL_NESTED $@ && exit $?

    }

Then, in your test-script, you can write things such as:

    ...
    utest cmd MyScript -c function_one
    utest assert "$UTOUT" == "I'm function one"
    ...


EXAMPLES
--------

Take a look at ./example.sh and ./example.test.sh files from this repository,
then try running the example test:

    ./example.test.sh
